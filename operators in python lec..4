{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d332fa7a",
   "metadata": {},
   "source": [
    "### operator in python:\n",
    "    1.Arithmetic operator\n",
    "    2.Assignment operator\n",
    "    3.Comparision operator\n",
    "    4.Logical operator\n",
    "    5.Identity operator\n",
    "    6.Membership operator\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20fdbcad",
   "metadata": {},
   "source": [
    "### 1.Arithmetic operator\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "82512ea8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sum =  30\n",
      "different = 10\n",
      "product = 200\n",
      "Division = 2.0\n",
      "exponent =  10240000000000\n",
      "modulus =  0\n"
     ]
    }
   ],
   "source": [
    "num_1=20\n",
    "num_2=10\n",
    "#addition operator\n",
    "sum=num_1+num_2\n",
    "print(\"sum = \",sum)\n",
    "\n",
    "#subtraction\n",
    "diff=num_1-num_2\n",
    "print(\"different =\",diff)\n",
    "\n",
    "#multiplication\n",
    "pro=num_1*num_2\n",
    "print(\"product =\",pro)\n",
    "\n",
    "\n",
    "#division\n",
    "div=num_1/num_2\n",
    "print(\"Division =\",div)\n",
    "\n",
    "#exponent\n",
    "exp=num_1**num_2 #20^10\n",
    "print(\"exponent = \",exp)\n",
    "\n",
    "\n",
    "#modulus\n",
    "mod=num_1%num_2\n",
    "print(\"modulus = \",mod)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b9ae420",
   "metadata": {},
   "source": [
    "### 2.Assignment operators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f15b56ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ece019c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "a +=5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "953905ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d4b7c646",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "b =5\n",
    "b -=2\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "958627e1",
   "metadata": {},
   "source": [
    "### 3 comparison operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f745e42e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "False\n",
      "True\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "a=5\n",
    "b=10\n",
    "print(a==b) #equal to comparison operator\n",
    "print(a!=b)#not eqaul to\n",
    "print(a>b)\n",
    "print(a<b)\n",
    "print(a<=b)\n",
    "print(a>=b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "316b1e0f",
   "metadata": {},
   "source": [
    "### 4.Logical operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4f473070",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "a=10\n",
    "print(a>20 and a>5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a47ecad8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "print(a>20 or a>5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9c1ef34e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "print(not(a>5 and a>5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d63db279",
   "metadata": {},
   "source": [
    "### 5.Identity operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ea1bea0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "x=5\n",
    "y=10\n",
    "print(x is y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "175d8a3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "print(x is not y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2fd30dae",
   "metadata": {},
   "source": [
    "### 6.Memberhsip operator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6c12ec70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "a=5\n",
    "b=10\n",
    "c=[1,2,3,4,5]\n",
    "print(a in c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0b7519b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "print(b in c )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "97b7439c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "a=5\n",
    "b=10\n",
    "c=[1,2,3,4,5]\n",
    "print(a  not in c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fe841c2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "print(b  not in c )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de09ff48",
   "metadata": {},
   "source": [
    "### Thanku"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ed5f500",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
